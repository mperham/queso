<style>
  BODY { font-family: verdana, arial, sans-serif; font-size: 14px; }
  .queso_search FORM DIV { display: inline; }
  .queso_search #terms { background-color: #def; }
  .queso_search #sorts { background-color: #fed; }
  #queso_results .even TD { background-color: #dfe; }
  #queso_results .odd TD { background-color: #dde; }
  #queso_results TD { padding-left: 30px; }
  .queso_debug { border: solid 1px black; }
</style>
<div class="queso_search">
  <h1>Find <%= current_model.pluralize.titleize %></h1>
  <h2>Criteria</h2>

  <% form_remote_tag :url => "/queso_searches/#{current_model}/submit", :html => { :id => 'term_form' } do %>
    <table id="terms">

      <% current_query.terms.each_with_index do |term, idx| %>
        <tr id="term-<%= idx %>">
          <td><%= h term.attribute %></td>
          <td><%= h term.operator %></td>
          <td><%= h term.value %></td>
          <td>
            <%= link_to_remote 'X', 
              { :url => "/queso_searches/#{current_model}/rm_term?term_idx=#{idx}" },
              { :method => :delete } -%>
          </td>
        </tr>
      <% end %>

      <tr id="newterm">
        <% options = current_query.klass.columns.map { |col| "<option value='#{col.name}' data_type='#{col.type}' nullable='#{col.null}'>#{col.name}</option>" } %>
        <td><%= select_tag 'term[attribute]', options, :onchange => 'update_operators();' %></td>
        <td><%= select_tag 'term[operator]', options_for_select(['=', '<', '>', '<=', '>=', 'is null', 'is not null', 'like']) %></td>
        <td><%= text_field_tag 'term[value]', '' %></td>
        <td><%= submit_tag 'Add Constraint' %></td>
      </tr>
    </table>
    
    <table id="sorts">
      <% current_query.orders.each_with_index do |order, idx| %>
      <tr id="sort-<%= idx %>">
        <td><%= h order.attribute %></td>
        <td><%= h order.dir %></td>
        <td>
          <%= link_to_remote 'X', 
            { :url => "/queso_searches/#{current_model}/rm_order?term_idx=#{idx}" },
            { :method => :delete } -%>
        </td>
      </tr>
      <% end %>

      <tr id="newsort">
        <td><%= select_tag 'sort[attribute]', options_from_collection_for_select(current_query.klass.columns, :name, :name) %></td>
        <td><%= select_tag 'sort[dir]', options_for_select(['asc', 'desc']) %></td>
        <td><%= submit_tag 'Add Sort' %></td>
      </tr>

    </table>

    <%= submit_tag 'Search' %>

  <% end %>

</div>
<script type="text/javascript">
  var OPERATORS = new Array(5);
  OPERATORS['string'] = ['LIKE', 'NOT LIKE', '=', '!='];
  OPERATORS['numeric'] = ['>', '>=', '=', '!=', '<=', '<'];
  OPERATORS['boolean'] = ['= true', '= false'];
  OPERATORS['null'] = ['is null', 'is not null'];

  function operators_for_type(type, nullable) {
    switch (type) {
      case 'string':
        typeops = OPERATORS['string']; break;
      case 'boolean':
        typeops = OPERATORS['boolean']; break;
      default:
        typeops = OPERATORS['numeric']; break;
    }
    return (nullable == 'true') ? typeops.concat(OPERATORS['null']) : typeops;
  }
  
  function update_operators() {
    var attr = document.getElementById('term_attribute');
    var option = attr.options[attr.selectedIndex];
    var sel = document.getElementById('term_operator');
    while (sel.options.length > 0) { 
      sel.remove(0); 
    }
    var operators = operators_for_type(option.getAttribute('data_type'), option.getAttribute('nullable'));
    for (var i=0; i<operators.length; i++) { 
      newOption = document.createElement("option"); 
      newOption.value = operators[i];  // assumes option string and value are the same 
      newOption.text = operators[i]; 
      try { 
        sel.add(newOption);  // this will fail in DOM browsers but is needed for IE 
      } 
      catch (e) { 
        sel.appendChild(newOption); 
      } 
    }
  }
  update_operators();
</script>